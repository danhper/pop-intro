section
  section
    h2
      | <small>a short introduction to</small>
      br
      | Process Oriented Programming
    h3
      | Daniel Perez
      br
      small
        span
          i.fa.fa-github.fa-margin
          a(href="https://github.com/tuvistavie" target="_blank") tuvistavie
        br
        span
          | <a href="https://www.csg.ci.i.u-tokyo.ac.jp/index-j.html" target="_blank">Chiba Lab</a>, 2017/5/14
    h4
      a(href="http://tuvistavie.com/slides/pop-intro" target="_blank") http://bit.ly/pop-intro

section
  section
    h2 BEAM
    ul
      li Virtual machine to run Erlang
      li Native support for concurrency and distribution
      li Designed for soft real-time

  section
    h2 Erlang processes
    ul  
      li Low memory footprint
      li Fast to create/destroy
      li Low scheduling overhead
      li Share nothing

  section
    h2 Process mailbox
    ul
      li Each process has a mailbox
      li Messages are delivered exactly once
      img(src="./images/actors.png")

section
  section
    h2 Process state
    h3 Stateful arguments
    pre: code.elixir
      | def loop(some_int) do
      |   receive do
      |     {:add, value} ->
      |       loop(some_int + value)
      |   end
      | end

  section
    h3 Creating a <code>Stack</code> server
    pre: code.elixir
      include ./snippets/stack_server_1.exs

  section
    h3 <code>push</code> function
    pre: code.elixir
      include ./snippets/stack_server_1_push.exs

  section
    h3 Making <code>pop</code> synchronous
    pre: code.elixir
      include ./snippets/stack_server_1_pop.exs

section
  section
    h2 Error handling
    p Two main primitives
    ul
      li
        code link
        | : non-stackable bidirectional link
        p if linked process dies, I must do something
      li
        code monitor
        | : stackable unidirectional link
        p if monitored process dies, it's not really my problem
  section
    h2 Process linking
    p Default behavior: if you die, I die
    pre: code.elixir
      | iex(1)> spawn_link(fn -> raise "die!" end)
      | ** (EXIT from #PID<0.98.0>) an exception was raised:
      |     ** (RuntimeError) die!
      |         (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6
      | 
      | Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
      | 
      | 22:27:50.586 [error] Process #PID<0.100.0> raised an exception
      | ** (RuntimeError) die!
      |     (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6
  section
    h2 Exit trapping
    p New link behavior: if you die, I get a message
    pre: code.elixir
      | iex(1)> Process.flag(:trap_exit, true)
      | false
      | iex(2)> spawn_link(fn -> raise "die!" end)   
      | #PID<0.101.0>
      | iex(3)> 
      | 22:30:04.530 [error] Process #PID<0.101.0> raised an exception
      | ** (RuntimeError) die!
      |     (stdlib) erl_eval.erl:668: :erl_eval.do_apply/6
      | flush()
      | {:EXIT, #PID<0.101.0>,
      |  {%RuntimeError{message: "die!"},
      |   [{:erl_eval, :do_apply, 6, [file: 'erl_eval.erl', line: 668]}]}}

section
  section
    h2 Supervisor vs worker
    p Processes are usually divided in two types
    ul
      li Worker: processes actually doing the job
      li Supervisor: processes starting and taking care of the workers

    p Supervisor are responsible for restarting workers

  section
    h2 Restart strategies
    p
      | 4 main strategies
      br
      | Given processes <code>A,B,C</code>, if <code>B</code> dies
    ul
      li One for one: restart <code>B</code>
      li One for all: restart <code>A,B,C</code>
      li Rest for one: restart <code>B,C</code>
      li Simple one for one: restart <code>B</code>
    p
      | Processes in simple one for one must have the same type (i.e. call the same function)
      | and are usually spawned dynamically

  section
    h2 Supervision tree
    p Application is usually composed of many supervisors and workers
    img(src="./images/supervisor.jpg")
